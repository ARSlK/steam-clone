const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// Подключение к MongoDB
mongoose.connect('mongodb://localhost:27017/steam_clone', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Модель пользователя
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  username: { type: String, required: true },
});
const User = mongoose.model('User', UserSchema);

// Регистрация
app.post('/api/register', async (req, res) => {
  const { email, password, username } = req.body;
  const candidate = await User.findOne({ email });
  if (candidate) {
    return res.status(400).json({ message: 'Пользователь с таким email уже существует' });
  }
  const hashedPassword = await bcrypt.hash(password, 7);
  const user = new User({ email, password: hashedPassword, username });
  await user.save();
  res.status(201).json({ message: 'Пользователь создан' });
});

// Вход
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(400).json({ message: 'Пользователь не найден' });
  }
  const isPassValid = await bcrypt.compare(password, user.password);
  if (!isPassValid) {
    return res.status(400).json({ message: 'Неверный пароль' });
  }
  const token = jwt.sign({ id: user._id }, 'secret_key', { expiresIn: '1h' });
  res.json({ token, userId: user._id, username: user.username });
});

// Запуск сервера
app.listen(5000, () => {
  console.log('Server started on port 5000');
});
